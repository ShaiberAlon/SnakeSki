# -*- coding: utf-8

import os
import argparse

import snakeski.workflows as w
from snakeski.workflows import WorkflowSuperClass



sub_workflow_mode = False if 'workflows/Fusions' in workflow.included[0] else True
if not sub_workflow_mode:
    # if this is not a sub workflow then we need to initialize the workflow object
    # don't be confused, child. when things come to this point, the variable `config`
    # is already magically filled in by snakemake:
    Fusions_workflow_object = WorkflowSuperClass(argparse.Namespace(config=config))
    Fusions_workflow_object.init('Fusions')

    rule Fusions_target_rule:
        input: Fusions_workflow_object.target_files

else:
    Fusions_workflow_object = workflow_object

dirs_dict = Fusions_workflow_object.dirs_dict



rule Fusions:
    version: 1.0
    log: os.path.abspath(os.path.join(dirs_dict["LOGS_DIR"], "{pair}-Fusions.log"))
    input:
        jabba = lambda wildcards: Fusions_workflow_object.get_rule_param('Fusions', 'jabba', wildcards),
        gencode = lambda wildcards: Fusions_workflow_object.get_rule_param('Fusions', 'gencode', wildcards)
    output:
    # TODO: this could be read from the task file
        Fusions = os.path.join(Fusions_workflow_object.ROOT_DIR, dirs_dict["Fusions"], '{pair}', "fusions.rds")
    params:
        id = lambda wildcards: Fusions_workflow_object.get_rule_param('Fusions', 'id', wildcards),
        output_dir = os.path.join(Fusions_workflow_object.ROOT_DIR, dirs_dict['Fusions'], '{pair}'),
        module_path = Fusions_workflow_object.modules['Fusions']
    threads: Fusions_workflow_object.T('Fusions')
    resources: nodes = Fusions_workflow_object.T('Fusions')
    shell:
        """
        # go to the directory
        mkdir -p {params.output_dir}
        cd {params.output_dir}

        # run
        bash {params.module_path}run.sh {params.module_path}run.R \
                                        -l {params.module_path} \
                                        -i {params.id} \
                                        -g {input.jabba} \
                                        -r {input.gencode} >> {log} 2>&1

        # go back
        cd -
        """
