# -*- coding: utf-8

import os
import argparse

from snakeski.workflows.oncotable import OncotableWorkflow
import snakeski.workflows as w


oncotable_workflow_object = OncotableWorkflow(argparse.Namespace(config=config))
dirs_dict = oncotable_workflow_object.dirs_dict

rule oncotable_target_rule:
    input: oncotable_workflow_object.target_files


rule oncotable:
    version: 1.0
    log: os.path.join(dirs_dict["LOGS_DIR"], "{pair}-oncotable.log")
    input:
        annotated_bcf = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'annotated_bcf', wildcards),
        complex = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'complex', wildcards),
        fusions = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'fusions', wildcards),
        jabba = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'jabba', wildcards),
        signature_counts = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'signature_counts', wildcards),
        gencode = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'gencode', wildcards),
    output:
    # TODO: this could be read from the task file
        oncotable = os.path.join(oncotable_workflow_object.ROOT_DIR, dirs_dict["ONCOTABLE_DIR"], '{pair}', "oncotable.rds")
    params:
        id = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'id', wildcards),
        filter = lambda wildcards: oncotable_workflow_object.get_rule_param('oncotable', 'filter', wildcards)
    threads: oncotable_workflow_object.T('oncotable')
    resources: nodes = oncotable_workflow_object.T('oncotable')
    shell:
        """
        bash {params.module_path}run.sh {params.module_path}run.R \
                                        -l {params.module_path} \
                                        -i {input.param.id} \
                                        -b {input.annotated_bcf} \
                                        -z {param.filter} \
                                        -e {input.complex} \
                                        -g {input.gencode} \
                                        -f {input.fusions} \
                                        -j {input.jabba} \
                                        -s {input.signature_counts} >> {log} 2>&1
        """
