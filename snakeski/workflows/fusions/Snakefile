# -*- coding: utf-8

import os
import argparse

from snakeski.workflows.fusions import FusionsWorkflow
import snakeski.workflows as w


fusions_workflow_object = FusionsWorkflow(argparse.Namespace(config=config))
dirs_dict = fusions_workflow_object.dirs_dict

rule fusions_target_rule:
    input: fusions_workflow_object.target_files


rule fusions:
    version: 1.0
    log: os.path.abspath(os.path.join(dirs_dict["LOGS_DIR"], "{pair}-fusions.log"))
    input:
        jabba = lambda wildcards: fusions_workflow_object.get_rule_param('fusions', 'jabba', wildcards),
        gencode = lambda wildcards: fusions_workflow_object.get_rule_param('fusions', 'gencode', wildcards)
    output:
    # TODO: this could be read from the task file
        fusions = os.path.join(fusions_workflow_object.ROOT_DIR, dirs_dict["FUSIONS_DIR"], '{pair}', "fusions.rds")
    params:
        id = lambda wildcards: fusions_workflow_object.get_rule_param('fusions', 'id', wildcards),
        output_dir = os.path.join(fusions_workflow_object.ROOT_DIR, dirs_dict["FUSIONS_DIR"], '{pair}'),
        module_path = fusions_workflow_object.modules['fusions']
    threads: fusions_workflow_object.T('fusions')
    resources: nodes = fusions_workflow_object.T('fusions')
    shell:
        """
        # go to the directory
        mkdir -p {params.output_dir}
        cd {params.output_dir}

        # run
        bash {params.module_path}run.sh {params.module_path}run.R \
                                        -l {params.module_path} \
                                        -i {params.id} \
                                        -g {input.jabba} \
                                        -r {input.gencode} >> {log} 2>&1

        # go back
        cd -
        """
